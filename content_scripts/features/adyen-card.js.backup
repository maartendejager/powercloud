/**
 * Adyen Card Feature Module
 *
 * This module provides functionality for viewing card information at Adyen
 * for card pages at https://[customer-environment].spend.cloud/cards/[card-id]/* or
 * https://[customer-environment].dev.spend.cloud/cards/[card-id]/* and other related card pages.
 * 
 * Loading Method: Manifest-only
 * This script is loaded via the manifest.json content_scripts configuration.
 */

/**
 * AdyenCardFeature class extending BaseFeature
 * Provides card information viewing functionality
 */
class AdyenCardFeature extends BaseFeature {
  constructor() {
    super('adyen-card', {
      hostElementId: 'powercloud-shadow-host',
      enableDebugLogging: false
    });
    
    // Feature-specific properties
    this.customer = null;
    this.cardId = null;
    this.isAdyenCard = null;
    this.vendor = null;
  }

  /**
   * Initialize the feature with URL match data
   * @param {object} match - The URL match result containing capture groups
   */
  async onInit(match) {
    await super.onInit(match);
    
    if (!match || match.length < 3) {
      throw new Error('Invalid match data for card feature');
    }

    // In our new pattern, customer is always in match[1] and cardId is always in match[2]
    this.customer = match[1];
    this.cardId = match[2];
    
    this.log('Initializing card feature', { customer: this.customer, cardId: this.cardId });
  }

  /**
   * Activate the feature - check settings and fetch card details
   */
  async onActivate() {
    await super.onActivate();
    
    try {
      // Check if buttons should be shown before fetching card details
      const result = await this.getStorageSettings();
      const showButtons = result.showButtons === undefined ? true : result.showButtons;

      if (!showButtons) {
        this.log('Buttons disabled, skipping card feature activation');
        return;
      }

      // Fetch card details to determine vendor before adding button
      await this.fetchCardDetailsAndAddButton();
      
    } catch (error) {
      this.handleError('Failed to activate card feature', error);
    }
  }

  /**
   * Clean up the feature
   */
  async onCleanup() {
    this.removeCardInfoButton();
    await super.onCleanup();
  }

  /**
   * Get storage settings as a Promise
   * @returns {Promise<Object>}
   */
  getStorageSettings() {
    return new Promise((resolve) => {
      chrome.storage.local.get('showButtons', resolve);
    });
  }

  /**
   * Fetch card details and add button based on vendor
   */
  async fetchCardDetailsAndAddButton() {
    try {
      const response = await this.sendMessage({
        action: "fetchCardDetails",
        customer: this.customer,
        cardId: this.cardId
      });

      if (response && response.success) {
        this.isAdyenCard = response.vendor === 'adyen';
        this.vendor = response.vendor;
        this.addCardInfoButton();
      } else {
        // If we can't determine vendor, add button with default behavior
        this.isAdyenCard = true;
        this.vendor = null;
        this.addCardInfoButton();
      }
    } catch (error) {
      this.handleError('Failed to fetch card details', error);
      // Add button with default behavior on error
      this.isAdyenCard = true;
      this.vendor = null;
      this.addCardInfoButton();
    }
  }

  /**
   * Send message to background script as a Promise
   * @param {Object} message
   * @returns {Promise<Object>}
   */
  sendMessage(message) {
    return new Promise((resolve) => {
      chrome.runtime.sendMessage(message, resolve);
    });
  }

  /**
   * Adds a button to view card information at Adyen
   */
  addCardInfoButton() {
    // Check if button already exists
    if (this.getHostElement()) {
      return;
    }

    // Create shadow DOM host element
    const shadowHost = document.createElement('div');
    shadowHost.id = this.hostElementId;

    // Check if buttons should be hidden by default
    chrome.storage.local.get('showButtons', (result) => {
      const showButtons = result.showButtons === undefined ? true : result.showButtons;
      shadowHost.className = showButtons ? 'powercloud-visible' : 'powercloud-hidden';
    });

    // Attach a shadow DOM tree to completely isolate our styles
    const shadowRoot = shadowHost.attachShadow({ mode: 'closed' });

    // Add external stylesheet to shadow DOM
    const linkElem = document.createElement('link');
    linkElem.rel = 'stylesheet';
    linkElem.href = chrome.runtime.getURL('content_scripts/styles.css');
    shadowRoot.appendChild(linkElem);

    // Create button container with styling
    const buttonContainer = document.createElement('div');
    buttonContainer.className = 'powercloud-container powercloud-button-container';
    buttonContainer.id = 'powercloud-button-container';

    // Create the button
    const button = document.createElement('button');
    button.id = 'powercloud-card-info-btn';
    button.className = 'powercloud-button';

    // Set button text and state based on vendor
    if (this.isAdyenCard) {
      button.textContent = 'View in Adyen';
      button.addEventListener('click', () => this.handleCardInfoClick());
    } else {
      button.textContent = `Card not in Adyen (${this.vendor || 'unknown vendor'})`;
      button.disabled = true;
      button.className += ' powercloud-button-disabled';
    }

    // Add button to container and container to shadow DOM
    buttonContainer.appendChild(button);
    shadowRoot.appendChild(buttonContainer);

    // Add shadow host to the page
    document.body.appendChild(shadowHost);
    
    this.log('Card info button added');
  }
    button.innerHTML = '🔍 View Card at Adyen';
    button.disabled = false;
  } else {
    button.innerHTML = '⚠️ Non Adyen Card';
    button.disabled = true;

    // Show more info if we know the vendor
    if (vendor) {
      button.title = `This card is issued by ${vendor}, not Adyen`;
    } else {
      button.title = 'This card is not issued by Adyen';
    }
  }

  // Add click event only if it's an Adyen card
  if (isAdyenCard) {
    button.addEventListener('click', () => {
      const originalText = button.innerHTML;
      button.innerHTML = '⏳ Loading...';
      button.disabled = true;

      // Get card details and navigate directly to Adyen
      chrome.runtime.sendMessage(
        {
          action: "fetchCardDetails",
          customer: customer,
          cardId: cardId
        },
        (response) => {
          button.innerHTML = originalText;
          button.disabled = false;

          if (!response || !response.success) {
            showCardInfoResult(`Error: ${response?.error || 'Failed to fetch card details'}`);
            return;
          }

          if (!response.paymentInstrumentId) {
            showCardInfoResult('No Adyen Payment Instrument ID found for this card. This card may not be linked to an Adyen account yet.');
            return;
          }

          // Open Adyen directly in a new tab
          const paymentInstrumentId = response.paymentInstrumentId;
          const adyenUrl = `https://balanceplatform-live.adyen.com/balanceplatform/payment-instruments/${paymentInstrumentId}`;
          window.open(adyenUrl, '_blank');
        }
      );
    });
  }

  // Add button to container and container to shadow DOM
  buttonContainer.appendChild(button);
  shadowRoot.appendChild(buttonContainer);

  // Add shadow host to the page
  document.body.appendChild(shadowHost);
}

/**
 * Removes the card information button and any related UI elements
 */
function removeCardInfoButton() {
  // Remove the shadow host for the button
  const shadowHost = document.getElementById('powercloud-shadow-host');
  if (shadowHost) {
    shadowHost.remove();
  }

  // Also remove any result shadow host that might be showing
  const resultHost = document.getElementById('powercloud-result-host');
  if (resultHost) {
    resultHost.remove();
  }
}

// Functions will be made available globally at the end of the file

/**
 * Shows a result message for card info operations
 * @param {string} message - The message to display
 */
function showCardInfoResult(message) {
  // Check if result display already exists
  const existingResult = document.getElementById('powercloud-result-host');
  if (existingResult) {
    existingResult.remove();
  }

  // Create shadow DOM host for result
  const resultHost = document.createElement('div');
  resultHost.id = 'powercloud-result-host';
  
  // Attach a shadow DOM tree
  const shadowRoot = resultHost.attachShadow({ mode: 'closed' });
  
  // Add link to our external stylesheet in shadow DOM
  const linkElem = document.createElement('link');
  linkElem.rel = 'stylesheet';
  linkElem.href = chrome.runtime.getURL('content_scripts/styles.css');
  shadowRoot.appendChild(linkElem);
  
  // Create result container
  const resultContainer = document.createElement('div');
  resultContainer.className = 'powercloud-result-container';
  
  // Add message
  const messageElem = document.createElement('div');
  messageElem.className = 'powercloud-result-message';
  messageElem.textContent = message;
  resultContainer.appendChild(messageElem);
  
  // Add close button
  const closeButton = document.createElement('button');
  closeButton.className = 'powercloud-result-close';
  closeButton.textContent = '×';
  closeButton.addEventListener('click', () => resultHost.remove());
  resultContainer.appendChild(closeButton);
  
  // Add container to shadow DOM
  shadowRoot.appendChild(resultContainer);
  
  // Add to page
  document.body.appendChild(resultHost);
  
  // Auto-remove after 10 seconds
  setTimeout(() => {
    if (document.body.contains(resultHost)) {
      resultHost.remove();
    }
  }, 10000);
}

// Create namespace for PowerCloud features if it doesn't exist
window.PowerCloudFeatures = window.PowerCloudFeatures || {};

// Register card feature functions in the PowerCloud namespace
window.PowerCloudFeatures.card = {
  init: initCardFeature,
  cleanup: removeCardInfoButton,
  showResult: showCardInfoResult
};
